#!/usr/bin/env bun

import { TelegraphPublisher } from "./telegraphPublisher";
import { readFileSync, existsSync } from "fs";
import { resolve } from "path";

interface CliOptions {
  file?: string;
  title?: string;
  author?: string;
  authorUrl?: string;
  help?: boolean;
}

function showHelp() {
  console.log(`
Telegraph Publisher CLI - –ü—É–±–ª–∏–∫–∞—Ü–∏—è Markdown –≤ Telegra.ph

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  bun run cli.ts [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --file <path>        –ü—É—Ç—å –∫ Markdown —Ñ–∞–π–ª—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  --title <title>      –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞)
  --author <name>      –ò–º—è –∞–≤—Ç–æ—Ä–∞
  --author-url <url>   URL –∞–≤—Ç–æ—Ä–∞
  --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  bun run cli.ts --file article.md --title "–ú–æ—è —Å—Ç–∞—Ç—å—è" --author "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
  bun run cli.ts --file content.md --author "–ê–≤—Ç–æ—Ä" --author-url "https://example.com"
  `);
}

function parseArgs(args: string[]): CliOptions {
  const options: CliOptions = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    switch (arg) {
      case "--file":
        options.file = args[++i];
        break;
      case "--title":
        options.title = args[++i];
        break;
      case "--author":
        options.author = args[++i];
        break;
      case "--author-url":
        options.authorUrl = args[++i];
        break;
      case "--help":
      case "-h":
        options.help = true;
        break;
    }
  }

  return options;
}

async function main() {
  const args = process.argv.slice(2);
  const options = parseArgs(args);

  if (options.help || args.length === 0) {
    showHelp();
    process.exit(0);
  }

  if (!options.file) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é --file");
    showHelp();
    process.exit(1);
  }

  const filePath = resolve(options.file);

  if (!existsSync(filePath)) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    process.exit(1);
  }

  try {
    console.log("üìù –ß–∏—Ç–∞—é —Ñ–∞–π–ª...");
    const markdownContent = readFileSync(filePath, "utf-8");

    const title = options.title || filePath.split("/").pop()?.replace(/\.md$/, "") || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
    const author = options.author || "–ê–Ω–æ–Ω–∏–º";

    console.log("üîß –°–æ–∑–¥–∞—é –∞–∫–∫–∞—É–Ω—Ç Telegraph...");
    const publisher = new TelegraphPublisher();
    const account = await publisher.createAccount(author, author, options.authorUrl);

    console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${account.short_name}`);
    console.log(`üîó Access Token: ${account.access_token}`);

    console.log("üì§ –ü—É–±–ª–∏–∫—É—é —Å—Ç–∞—Ç—å—é...");
    const page = await publisher.publishMarkdown(title, markdownContent);

    console.log("üéâ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!");
    console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${page.title}`);
    console.log(`üîó URL: ${page.url}`);
    console.log(`üìç Path: ${page.path}`);

    if (page.author_name) {
      console.log(`üë§ –ê–≤—Ç–æ—Ä: ${page.author_name}`);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", error instanceof Error ? error.message : String(error));
    process.exit(1);
  }
}

if (import.meta.main) {
  main();
}